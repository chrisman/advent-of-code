const describe = require('./test')
const data = require('../data/05.data')
const {
  getAnswer,
  areSameType,
  areOppositePolarity,
  areDifferentCases,
  main,
} = require('../day/0501')

describe('main()', assert => {
  assert({
    given: 'a string with no reactions',
    should: 'returns the length',
    actual: main('AAbbCC'),
    expected: 6
  })

  assert({
    given: 'a small string with reactions',
    should: 'returns the length',
    actual: main(data.test),
    expected: 'dabCBAcaDA'.length
  })

  assert({
    given: 'the real data',
    should: 'returns the length',
    actual: main(data.data),
    expected: 11814
  })
})

describe('getAnswer()', assert => {
  assert({
    given: 'test input',
    should: 'return the right answer',
    actual: getAnswer(data.test),
    expected: 'dabCBAcaDA'
  })
  assert({
    given: 'real input',
    should: 'return the right answer',
    actual: getAnswer(data.data),
    expected: ''
  })
})

describe('areSameType()', assert => {
  assert({
    given: 'types of different type',
    should: 'return true',
    actual: areSameType('a', 'A'),
    expected: true
  })
  assert({
    given: 'types of same type',
    should: 'return true',
    actual: areSameType('b', 'b'),
    expected: true
  })
  assert({
    given: 'types of different type',
    should: 'return type',
    actual: areSameType('q', 'b'),
    expected: false
  })
})

describe('areDifferentCases()', assert => {
  assert({
    given: 'different cases',
    should: 'return true',
    actual: areOppositePolarity('C', 'c'),
    expected: true
  })
})

describe('areOppositePolarity()', assert => {
  assert({
    given: 'same polarity',
    should: 'return true',
    actual: areOppositePolarity('C', 'c'),
    expected: true
  })
})
